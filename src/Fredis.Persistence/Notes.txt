Implementation agostic layer for DB/Caching/Redis/Blob/Files persistance



 POCOs
 - Persistence
	* IPocoPersistor persists IDataObject POCOs somewhere depending on atrributes (RDBMS is default, but could 
		also extend to DynamoDB or anything else)
	* IDistributedDataObject are persisted in DB shards (virtual or real) or in any other key-value
		storage. 
 - Caching
	* By default we cache all IDataObjects and hot IDistributedDataObjects (they will expire)
	* Permanent cache could only be stored in Redis (and we always have redis, it is in the name)
	* Ephemeral cache could be stored in Memcached as well, to save Redis for more important types
	* But keep in mind that Redis cluster is what will be the best tool already in 2014!
	* As of now just do with Redis the same trick as with DBs - virtual or real shards


The idea is that we could scale up and scale out. Using Amazon RDS, we could scale up by c. 2^8
	0 Micro instances	db.t1.micro	1	Variable	0.615
	1 Standard - First Generation	db.m1.small	1	1	1.7
	2 Standard - Second Generation	db.m3.medium	1	3	3.75
	3 Standard - Second Generation	db.m3.large	2	6.5	7.5
	4 Memory optimized	db.m2.xlarge	2	6.5	17.1 (or Standard - Second Generation	db.m3.xlarge	4	13	15)
	5 Memory optimized	db.m2.2xlarge	4	13	34.2
	6 Memory optimized	db.m2.4xlarge	8	26	68.4
	7 Memory optimized	db.cr1.8xlarge*	32	88	244

Scaling up is simpler than scaling out. Given that a lot of data is cached we could expect that
inserts will take the major part of load into DB (but reads of cold data is there still). The decision to scale up or out will be based
on costs vs required IOPS performance. Also scaling out usually requires half the power of existing
nodes since they will take only half of the load. It should be irrelevant to scale up or out
but we should keep load in the range of 40-80% so it is better to scale out first with less powerfull 
nodes then scale up. TODO - need some basic model with read/writes, costs, etc.

