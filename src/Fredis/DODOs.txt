

2x2 matrix:
								IDs
				Local (Autoincrement)		Distributed (Guid)
				[complex data]				[key-value]
Persisted		RDBMS						DynamoDB, sharded RDBMS, Redis cluster, S3

Ephemeral		Redis						Redis, MemCached, DynamoDB



Add my Persistor class to Fredis


Use SS.OrmLite v3 or PetaPoco for microORM
BookSleve for Redis
AWS SDK for DDB
MemCached library on which SS is based on


Goal is to use decorated POCOs derived from a base abstract class to define all 
persistence and caching behavior for CRUD operations.

Initial Fredis vision is untouched, but think about methods to sync Redis complex data with RDBMS
for the local case

SS.ORML is not free, should modify PetaPoco and make convenient attributes

TPH - either class attribute with table definition or keep just indexed column and store 

SS exprssion for query - could just "borrow" from v3



Automatic BLOB storage - with attribute or by type:
e.g. if I have Email with attachments as MyFiles types array, I must be able to 
automatically store MyFiles where needed (defined my their attributes) 

Need interfaces and DI:
BlobPersistor - with S3 or RDBMS or anything, key <-> Stream/byte[]

Should not depend on AWS but provide default implementation for DDB and S3

For shards -> need to return Persistor instance based on Guid: DDB will always return the same 
client, while for RDMS we could have a lookup based on Guids. We need base abstract method and 
virtual method with default implementation for RDBMS

For distributed ephemeral us SS.Cache and what I already did on caching - hide SS inside or 
integrate source code - it is not that big


protobuf-net instead of SS.Text



Look into F# way of doing SQL - it is better!
FsSQL - many commits, no traction


ValueInjecter


Just use SS v3 - autocreation etc is not what I want to rewrite, hide it behind DB persistor
so could easily switch to any other
Therefore - SS automapper is here if we use SS.ORML - no additional dependency



